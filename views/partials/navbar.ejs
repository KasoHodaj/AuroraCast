
<nav class="navbar navbar-expand-lg navbar-dark align-items-center">
  <div class="container-fluid">
    <!-- Brand -->
    <a class="navbar-brand" href="#">
      <span class="brand-text">AuroraCast</span>
      <span class="brand-dot">.</span>
    </a>

    <!-- Search Box for Large Screens -->
    <form class="d-none d-lg-block search-form" action="/" method="GET">
      <div class="input-group">
        <input type="text" name="city" class="form-control search-input" placeholder="Enter city" autocomplete="off" required />
        <button class="btn search-button" type="submit">
          <i class="fa fa-search"></i>
        </button>
      </div>
    </form>

    <!-- Hamburger -->
    <button class="navbar-toggler custom-toggler" type="button" data-bs-toggle="collapse" data-bs-target="#navLinks">
      <span class="navbar-toggler-icon"></span>
    </button>

    <!-- Collapsible Content -->
    <div class="collapse navbar-collapse" id="navLinks">
      <!-- Mobile Search -->
      <form class="d-lg-none search-form-mobile" action="/" method="GET">
        <div class="input-group">
          <input type="text" name="city" class="form-control search-input" placeholder="Enter city" autocomplete="off" required />
          <button class="btn search-button" type="submit">
            <i class="fa fa-search"></i>
          </button>
        </div>
      </form>

      <!-- Nav Links -->
      <ul class="navbar-nav ms-auto">
        <!-- Language Dropdown -->
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" id="languageDropdown" data-bs-toggle="dropdown">
            <i class="fa-solid fa-language"></i> <span id="currentLanguage">Language</span>
          </a>          
          <ul class="dropdown-menu dropdown-menu-end custom-dropdown">
            <li><button class="dropdown-item lang-option" data-lang="sq">Albanian</button></li>
            <li><button class="dropdown-item lang-option" data-lang="en">English</button></li>
            <li><button class="dropdown-item lang-option" data-lang="el">Greek</button></li>
            <li><button class="dropdown-item lang-option" data-lang="it">Italian</button></li>
          </ul>
        </li>
        

        <!-- Theme Dropdown -->
        <li class="nav-item dropdown">
          <a class="nav-link dropdown-toggle" href="#" id="themeDropdown" data-bs-toggle="dropdown">
            <i id="themeIcon" class="fa-solid"></i> Theme
          </a>
          <ul class="dropdown-menu dropdown-menu-end custom-dropdown">
            <li>
              <button class="dropdown-item" id="lightThemeBtn">Light Mode</button>
            </li>
            <li>
              <button class="dropdown-item" id="darkThemeBtn">Dark Mode</button>
            </li>
          </ul>
        </li>

        <!-- Location Button -->
        <li class="nav-item">
          <button type="button" class="btn location-button" id="detectLocationBtn">
            <i class="fa-solid fa-location-crosshairs"></i> Location
          </button>
        </li>
      </ul>
    </div>
  </div>
</nav>

<script>
  document.addEventListener("DOMContentLoaded", function () {
    const currentLanguageElement = document.getElementById("currentLanguage");

    function setLanguage(lang, translations) {
      if (!translations[lang]) return;
      console.log("Setting language to:", lang);

      // Update text content for various elements
      const navbarBrand = document.querySelector(".navbar-brand");
      if (navbarBrand) navbarBrand.textContent = translations[lang].navbar_brand;
      
      const headerP = document.querySelector("header p");
      if (headerP) headerP.textContent = translations[lang].tagline;
      
      const currentWeatherH2 = document.getElementById("current-weather")?.querySelector("h2");
      if (currentWeatherH2) currentWeatherH2.textContent = translations[lang].now;
      
      const todaysForecastH2 = document.getElementById("todays-forecast")?.querySelector("h2");
      if (todaysForecastH2) todaysForecastH2.textContent = translations[lang].todays_forecast;
      
      const airQualityH3 = document.querySelector(".air-quality h3");
      if (airQualityH3) airQualityH3.textContent = translations[lang].air_quality;
      
      const highlightsH3 = document.querySelector(".highlights h3");
      if (highlightsH3) highlightsH3.textContent = translations[lang].highlights;
      
      const weeklyForecastH2 = document.getElementById("weekly-forecast")?.querySelector("h2");
      if (weeklyForecastH2) weeklyForecastH2.textContent = translations[lang].weekly_forecast;
      
      const hourlyWeatherH3 = document.getElementById("hourly-weather")?.querySelector("h3");
      if (hourlyWeatherH3) hourlyWeatherH3.textContent = translations[lang].hourly_forecast;
      
      const didYouKnowH2 = document.getElementById("did-you-know")?.querySelector("h2");
      if (didYouKnowH2) didYouKnowH2.textContent = translations[lang].did_you_know;
      
      const footerP = document.querySelector("footer p");
      if (footerP) footerP.textContent = translations[lang].footer;
      
      const detectLocationBtn = document.getElementById("detectLocationBtn");
      if (detectLocationBtn) {
        detectLocationBtn.innerHTML = `<i class="fa-solid fa-location-crosshairs"></i> ${translations[lang].location_btn}`;
      }
      
      // Update only the inner span of the language dropdown
      currentLanguageElement.textContent = translations[lang].language_btn;
      
      // Save language preference in localStorage
      localStorage.setItem("selectedLanguage", lang);
    }

    function loadLanguage() {
      fetch("/data/languages.json")
        .then(response => response.json())
        .then(translations => {
          console.log("Translations loaded:", translations);
          // Get saved language or default to English
          const savedLang = localStorage.getItem("selectedLanguage") || "en";
          setLanguage(savedLang, translations);

          // Attach event listeners for language change
          document.querySelectorAll(".lang-option").forEach(button => {
            button.addEventListener("click", function () {
              const selectedLang = this.getAttribute("data-lang");
              setLanguage(selectedLang, translations);
            });
          });
        })
        .catch(error => console.error("Error loading language file:", error));
    }

    loadLanguage();
  });
</script>


<!-- Use My Location Script -->
<script>
  document.getElementById("detectLocationBtn").addEventListener("click", () => {
    if ("geolocation" in navigator) {
      navigator.geolocation.getCurrentPosition(
        (position) => {
          const lat = position.coords.latitude;
          const lon = position.coords.longitude;
          // Redirect to the weather route with the lat & lon as query parameters
          window.location.href = `/?lat=${lat}&lon=${lon}`;
        },
        (error) => {
          alert("Unable to retrieve your location. Check browser permissions.");
        }
      );
    } else {
      alert("Geolocation not supported by your browser.");
    }
  });
</script>



<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/js/bootstrap.bundle.min.js"
  integrity="sha384-9ti2GwaNDz3B2VTxXyZnCAzKqL24K/ygk0s3uPiIcJVVBlspCBIC1Qsr6F5CHcQv" crossorigin="anonymous"></script>

  
<style>

  .navbar {
    background: linear-gradient(135deg, #003366 0%, #004080 100%);
    padding: 1rem;
    box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
  }

  /* Brand Styles */
  .navbar-brand {
    font-size: 1.75rem;
    font-weight: 700;
    letter-spacing: -0.5px;
    margin-right: 2rem;
    transition: transform 0.2s;
    gap: 50px;
  }

  .navbar-brand:hover {
    transform: scale(1.05);
  }

  .navbar-nav {
    display: flex;
    gap: 1rem;
  }

  .brand-dot {
    color: #00a8ff;
  }


  .search-form {
    min-width: 300px;
    max-width: 500px;
    width: 40%;
    margin: 0 auto;
  }

  .search-input {
    border-radius: 25px 0 0 25px;
    border: 2px solid rgba(255, 255, 255, 0.1);
    background: rgba(255, 255, 255, 0.1);
    color: white !important;
    padding: 0.63rem 1.3rem;
    transition: all 0.3s ease;
  }

  .search-input::placeholder {
    color: rgba(255, 255, 255, 0.7);
  }

  .search-input:focus {
    background: rgba(255, 255, 255, 0.15);
    border-color: #00a8ff;
    box-shadow: 0 0 0 2px rgba(0, 168, 255, 0.2);
  }

  .search-button {
    border-radius: 0 25px 25px 0;
    background: #00a8ff;
    color: white;
    border: none;
    padding: 0.625rem 1.25rem;
    transition: all 0.3s ease;
  }

  .search-button:hover {
    background: #0090dd;
    transform: translateX(2px);
  }

  /* Dropdown Styles */
  .custom-dropdown {
    background: #ffffff;
    border: none;
    border-radius: 12px;
    box-shadow: 0 4px 20px rgba(0, 0, 0, 0.15);
    padding: 0.5rem;
  }

  .dropdown-item {
    border-radius: 8px;
    padding: 0.75rem 1rem;
    transition: all 0.2s;
  }

  .dropdown-item:hover {
    background: rgba(0, 168, 255, 0.1);
    color: #003366;
    transform: translateX(4px);
  }


  .location-button {
    background: transparent;
    border: 2px solid rgba(255, 255, 255, 0.2);
    color: white;
    border-radius: 25px;
    padding: 0.625rem 1.25rem;
    transition: all 0.3s ease;
  }

  .location-button:hover {
    background: rgba(255, 255, 255, 0.1);
    border-color: #00a8ff;
    color: white;
    transform: translateY(-2px);
  }

  /* Mobile Styles */
  @media (max-width: 991px) {
    .navbar {
      padding: 0.75rem;
    }


    .navbar-nav {
      gap: 0.5rem;
    }


    .search-form-mobile {
      margin: 1rem 0;
      width: 100%;
    }

    .navbar-collapse {
      background: rgba(0, 51, 102, 0.95);
      border-radius: 12px;
      margin-top: 1rem;
      padding: 1rem;
    }

    .nav-item {
      margin: 0.5rem 0;
    }

    .location-button {
      width: 100%;
      margin: 0.5rem 0;
    }
  }

  /* Small Screen Optimizations */
  @media (max-width: 576px) {
    .navbar-brand {
      font-size: 1.5rem;
    }

    .search-input {
      font-size: 0.95rem;
    }

    .nav-link {
      font-size: 0.95rem;
      padding: 0.5rem 0.75rem;
    }
  }

  /* Custom Toggler */
  .custom-toggler {
    border: 2px solid rgba(255, 255, 255, 0.2);
    padding: 0.375rem 0.75rem;
    transition: all 0.3s ease;
  }

  .custom-toggler:hover {
    border-color: #00a8ff;
    transform: scale(1.05);
  }

  /* Animation for Dropdown */
  .dropdown-menu {
    animation: dropdownFade 0.4s ease;
  }

  @keyframes dropdownFade {
    from {
      opacity: 0;
      transform: translateY(-10px);
    }

    to {
      opacity: 1;
      transform: translateY(0);
    }
  }
</style>


<script>
  // Function to show a message when clicking theme options
  function showThemeMessage() {
    alert("Theme switching is not available yet, but it's coming in a future update. Stay tuned!");
  }

  // Attach event listeners to theme buttons
  document.getElementById("lightThemeBtn").addEventListener("click", showThemeMessage);
  document.getElementById("darkThemeBtn").addEventListener("click", showThemeMessage);
</script>